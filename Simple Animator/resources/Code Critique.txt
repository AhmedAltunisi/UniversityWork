Design Critique and Suggestions
        We felt that generally the provider’s code was designed well. However there were a few choices that we felt could have improved the design. To begin, the way that the providers’ code was able to separate the view from the model utilizing a controller was beneficial and executed well. The first design choice we thought could be improved was the choice to have only one shape class for both ovals and rectangles, and instead the type of shape was encoded as a string field in the shape. We think that it would have been a better design choice to have an individual class for each shape type which would make it easier for creating new shape types without having to modify existing code, which is what would have to happen with the current design choice. Another design choice that we thought could be improved would be the inclusion of a view model for use in the view. The providers decided to utilize a list of animations when constructing their views which was good in that it allowed for decoupling of the model and the view however we think that providing a view model may be beneficial for any future view implementations which may need other values contained in the model for their rendering. This would also mean many of the methods that were included in the model could be ignored (as we did for constructing the view) allowing for a more streamlined model to view creation. Finally, we felt that the controller could have been more decoupled from the listener implementation by utilizing lambdas and the Features interface that was discussed in the View lecture. This is a minor change however it is beneficial in that the controller can be more separated from the view.
With only a few adapter classes that we had to create for the model and controller we were easily able to utilize the producers’ view and reuse the code they created


Implementation Critique and Suggestions
        The implementation of the provider’s code is done well. The model has good data structure usage, from what we can tell, which allows for mapping shapes’ current states to the tick that they are applied to. Additionally, the view is designed in such a way that the individual steps can easily be extracted and the view gives all the required features for the interactive view. However, there are a few suggestions we have for the providers on their implementation of the view. In their model they stated that they did not want to store all the interpolated states of the shapes so they created a utility method that calculates those states intermittently, but they end up just storing those values anyway in order to produce the view, so that utility method could likely be moved into the view which would make the code easier to interpret. Although the view has all the required functionality that was expected from Assignment 7 we felt that there was an excess of buttons on the interactive view. The start button as well as the multiple buttons for resume and pause felt unnecessary. We believe that combining the pause, resume, and start buttons would be beneficial in cleaning up the view and making it more accessible for a user. Additionally, the enable and disable loop buttons could be combined into a toggle button that would allow for an animation to be looping or not looping. Finally, the controller interface was a little confusing for us because we felt that it implemented some of the functionality that excellence main method should have handled, and it could have been more straightforward if some of that functionality was included in there rather than the controller.


Documentation Critique
        The documentation provided to us by the providers for this project was well thought out, especially the README. They clearly went over the required parts to be implemented and how they would be useful for completing the assignment. Additionally every method and class contained valuable javadocs and helped us progress as we went through their code and reviewed how it worked. That being said, we do believe that it would be beneficial for the providers to give some more specifics on how their MVC setup was connected. It took us a bit of time to consider what was actually being passed as input in the controller and view and how the variables were used for constructing the view. Because their model implementation was not given we felt that providing us with a more useful README with specifics would have been better. There were also a few minor mistakes that did not really make a difference in us completing the assignment.