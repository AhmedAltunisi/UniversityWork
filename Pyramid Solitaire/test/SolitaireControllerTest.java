
import cs3500.pyramidsolitaire.controller.PyramidSolitaireController;
import cs3500.pyramidsolitaire.controller.PyramidSolitaireTextualController;
import cs3500.pyramidsolitaire.model.hw02.BasicPyramidSolitaire;
import cs3500.pyramidsolitaire.model.hw02.Cards;
import cs3500.pyramidsolitaire.model.hw02.PyramidSolitaireModel;
import cs3500.pyramidsolitaire.model.hw04.MultiPyramidSolitaire;
import cs3500.pyramidsolitaire.model.hw04.RelaxedPyramidSolitaire;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Tests the Pyramid Solitaire controller.
 */
public class SolitaireControllerTest {

  static Interaction inputs(String in) {
    return (input, output) -> {
      input.append(in);
    };
  }

  static Interaction prints(String... lines) {
    return (input, output) -> {
      for (String line : lines) {
        output.append(line).append('\n');
      }
    };
  }

  /**
   * Tests the controller by feeding it inputs and comparing expected and actual outputs.
   *
   * @param model        The model of Pyramid Solitaire
   * @param interactions A list of interactions
   * @return An Array with the expected and actual outputs
   * @throws IOException When something goes wrong with the output
   */
  public List<String> testRun(PyramidSolitaireModel<Cards> model, Interaction... interactions)
      throws IOException {

    StringBuilder fakeUserInput = new StringBuilder();
    StringBuilder expectedOutput = new StringBuilder();

    for (Interaction interaction : interactions) {
      interaction.apply(fakeUserInput, expectedOutput);
    }

    StringReader input = new StringReader(fakeUserInput.toString());
    StringBuilder actualOutput = new StringBuilder();

    PyramidSolitaireController controller = new PyramidSolitaireTextualController(input,
        actualOutput);
    controller.playGame(model, model.getDeck(), false, 7, 3);

    return new ArrayList<String>(Arrays.asList(expectedOutput.toString(), actualOutput.toString()));
  }

  @Test
  public void testQuit() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"),
        inputs("q"),
        prints("Game quit!\n"
            + "State of game when quit:\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testQuitWhileInputtingCommand() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"),
        inputs("rm1 7 q"),
        prints("Invalid move. Play again. Invalid remove\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"),
        prints("Game quit!\n"
            + "State of game when quit:\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testInvalidRemove() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm1 8 8"),
        prints("Invalid move. Play again. Invalid remove\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣" + "\nScore: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testInvalidRemove2Cards() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm2 8 8 1 1"),
        prints("Invalid move. Play again. Invalid remove\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣" + "\nScore: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testInvalidRemoveWithDraw() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rmwd 10 7 2"),
        prints("Invalid move. Play again. Invalid remove\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣" + "\nScore: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testInvalidDiscard() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("dd 8"),
        prints("Invalid move. Play again. Invalid index\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣" + "\nScore: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void validRemove() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm1 7 5"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  .   A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  .   A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void validRemove2Cards() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm2 7 a 7 a 7 a 3"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  K♠  A♣  . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  K♠  A♣  . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void twoValidRemove2Cards() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm2 7 a 7 a 7 a 3 rm2 7 4 7 6"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  K♠  A♣  . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   .   K♠  .   . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 159\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   .   K♠  .   . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 159"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void validRemoveWithDraw() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rmwd 1 7 a 2"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  .   J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 175\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  .   J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 175"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void validDrawDiscard() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("dd 1"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♣, 5♣, 6♣"
            + "\nScore: 185"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♣, 5♣, 6♣" + "\nScore: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void gameWin() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm2 7 7 7 3 "
            + "rm2 7 4 7 6 "
            + "rmwd 1 7 2 "
            + "rm1 7 5 "
            + "rm2 7 1 6 2 "
            + "rm2 6 6 6 3 "
            + "rm2 6 5 6 4 "
            + "rm1 5 3 "
            + "rm2 5 2 5 4 "
            + "rmwd 2 4 2 "
            + "rmwd 1 4 3 "
            + "rmwd 3 3 2 dd 3 "
            + "rmwd 3 6 1 "
            + "rm2 5 1 5 5 "
            + "rmwd 1 4 1 "
            + "dd 2 "
            + "dd 3 "
            + "dd 3 "
            + "dd 3 "
            + "rmwd 3 4 4 "
            + "rmwd 1 3 3 "
            + "dd 3 "
            + "dd 3 "
            + "dd 3 "
            + "dd 3 "
            + "rmwd 3 3 1 "
            + "rmwd 3 2 2 "
            + "rmwd 3 2 1 rmwd 1 1 1"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  K♠  A♣  . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   .   K♠  .   . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 159\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  .   .   .   K♠  .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 149\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  .   .   .   .   .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 136\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  .   5♠  6♠  7♠  8♠\n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 123\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  .   .   6♠  7♠  . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 110\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 97\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  .   A♠  2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 84\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  .   .   .   2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 71\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  .   9♦  10♦\n"
            + "    J♦  .   .   .   2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 4♣, 6♣, 7♣\n"
            + "Score: 63\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  .   .   10♦\n"
            + "    J♦  .   .   .   2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 6♣, 7♣, 8♣\n"
            + "Score: 54\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "      7♦  .   .   10♦\n"
            + "    J♦  .   .   .   2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 6♣, 7♣, 9♣\n"
            + "Score: 49\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "      7♦  .   .   10♦\n"
            + "    J♦  .   .   .   2♠\n"
            + "  3♠  .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 6♣, 7♣, 10♣\n"
            + "Score: 49\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "      7♦  .   .   10♦\n"
            + "    J♦  .   .   .   2♠\n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 6♣, 7♣, J♣\n"
            + "Score: 46\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "      7♦  .   .   10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 6♣, 7♣, J♣\n"
            + "Score: 33\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "       .   .   .   10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 7♣, J♣, Q♣\n"
            + "Score: 26\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "       .   .   .   10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 7♣, Q♣, K♣\n"
            + "Score: 26\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "       .   .   .   10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 7♣, Q♣, A♥\n"
            + "Score: 26\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "       .   .   .   10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 7♣, Q♣, 2♥\n"
            + "Score: 26\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "       .   .   .   10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 7♣, Q♣, 3♥\n"
            + "Score: 26\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 7♣, Q♣, 4♥\n"
            + "Score: 16\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, 5♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, 6♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, 7♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, 8♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, 9♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "         .   .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, 10♥\n"
            + "Score: 6\n"
            + "            A♦\n"
            + "          2♦  . \n"
            + "         .   .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, J♥\n"
            + "Score: 3\n"
            + "            A♦\n"
            + "           .   . \n"
            + "         .   .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 4♥, Q♥\n"
            + "Score: 1\n"
            + "You win!"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void gameLose() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new BasicPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 "
            + "dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1"
            + "dd 1 dd 1 dd 1 dd 1 rm1 7 5 rm2 7 3 7 7 rm2 7 4 7 6 rm2 6 4 6 5 "
            + "rm2 6 3 6 6 rm1 5 3"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 5♣, 6♣, 7♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 6♣, 7♣, 8♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 7♣, 8♣, 9♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 8♣, 9♣, 10♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 9♣, 10♣, J♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 10♣, J♣, Q♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: J♣, Q♣, K♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: Q♣, K♣, A♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: K♣, A♥, 2♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: A♥, 2♥, 3♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 2♥, 3♥, 4♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♥, 4♥, 5♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♥, 5♥, 6♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 5♥, 6♥, 7♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 6♥, 7♥, 8♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 7♥, 8♥, 9♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 8♥, 9♥, 10♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 9♥, 10♥, J♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 10♥, J♥, Q♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: J♥, Q♥, K♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: Q♥, K♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: K♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw:\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  .   A♣  2♣\n"
            + "Draw:\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  .   A♣  . \n"
            + "Draw:\n"
            + "Score: 159\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   .   .   .   . \n"
            + "Draw:\n"
            + "Score: 146\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  .   .   8♠\n"
            + "9♠  10♠ .   .   .   .   . \n"
            + "Draw:\n"
            + "Score: 133\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  .   .   .   . \n"
            + "9♠  10♠ .   .   .   .   . \n"
            + "Draw:\n"
            + "Score: 120\n"
            + "Game over. Score: 107"));
    assertEquals(test.get(0), test.get(1));
  }


  @Test
  public void relaxedGameWin() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new RelaxedPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("rm2 7 7 7 3 "
            + "rm2 f 7 3ff3 4 f3f 7 f3ff 6 "
            + "rmwd efe 2 f3f3 7 f3f3 1 "
            + "rm1 7 5 "
            + "rm2 7 2 3d3d 6 d22d2 1 "
            + "rm2 6 6 6 3 "
            + "rm2 ddd 6 frv 5 f3f 6 effef3 4 "
            + "rm1 5 3 "
            + "dd 2 "
            + "dd 2 "
            + "dd 2 "
            + "rmwd 3 6 2 "
            + "rm2 5 1 5 5 "
            + "rm2 5 2 5 4 "
            + "rmwd 1 4 4 "
            + "dd 1 "
            + "dd 1 "
            + "dd 3"
            + "dd 3 "
            + "dd 3 "
            + "dd 3 dd 3 "
            + "rmwd 3 4 3 "
            + "rm2 4 2 3 2  "
            + "rm2 4 1 3 3 "
            + "dd 3 "
            + "dd 3 "
            + "dd 3 "
            + "dd 3 "
            + "rmwd 3 3 1 "
            + "rmwd 1 2 1 "
            + "rmwd 2 2 2 "
            + "rmwd 1 1 1"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  K♠  A♣  . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   .   K♠  .   . \n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 159\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + " .   10♠ .   .   K♠  .   . \n"
            + "Draw: 3♣, 5♣, 6♣\n"
            + "Score: 150\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + " .   10♠ .   .   .   .   . \n"
            + "Draw: 3♣, 5♣, 6♣\n"
            + "Score: 137\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "   .   4♠  5♠  6♠  7♠  8♠\n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 5♣, 6♣\n"
            + "Score: 124\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "   .   4♠  .   6♠  7♠  . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 5♣, 6♣\n"
            + "Score: 111\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "   .   4♠  .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 5♣, 6♣\n"
            + "Score: 98\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  .   A♠  2♠\n"
            + "   .   4♠  .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 5♣, 6♣\n"
            + "Score: 85\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  .   A♠  2♠\n"
            + "   .   4♠  .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 6♣, 7♣\n"
            + "Score: 85\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  .   A♠  2♠\n"
            + "   .   4♠  .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 7♣, 8♣\n"
            + "Score: 85\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  .   A♠  2♠\n"
            + "   .   4♠  .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 8♣, 9♣\n"
            + "Score: 85\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  .   A♠  2♠\n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 8♣, 10♣\n"
            + "Score: 81\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "     .   Q♦  .   A♠  . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 8♣, 10♣\n"
            + "Score: 68\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 3♣, 8♣, 10♣\n"
            + "Score: 55\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 8♣, 10♣, J♣\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: 10♣, J♣, Q♣\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, K♣\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, A♥\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 2♥\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 3♥\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 4♥\n"
            + "Score: 45\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 5♥\n"
            + "Score: 36\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   6♦\n"
            + "      7♦  .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 5♥\n"
            + "Score: 23\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 5♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 6♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 7♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 8♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 9♥\n"
            + "Score: 10\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "         .   .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: J♣, Q♣, 10♥\n"
            + "Score: 6\n"
            + "            A♦\n"
            + "           .   3♦\n"
            + "         .   .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, 10♥, J♥\n"
            + "Score: 4\n"
            + "            A♦\n"
            + "           .   . \n"
            + "         .   .   . \n"
            + "       .   .   .   . \n"
            + "     .   .   .   .   . \n"
            + "   .   .   .   .   .   . \n"
            + " .   .   .   .   .   .   . \n"
            + "Draw: Q♣, J♥, Q♥\n"
            + "Score: 1\n"
            + "You win!"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void relaxedGameLose() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new RelaxedPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣"
            + "\nScore: 185"),
        inputs("dd ff 1 dd  e dd  d 1 dd d dd d d 1 dd 1 dd 1 dd 1 dd 1 dd 1 "
            + "dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1 dd 1"
            + "dd 1 dd 1 dd 1 dd 1 rm1 7 5 rm2 7 3 7 7 rm2 7 4 7 6 rm2 6 4 6 5 "
            + "rm2 6 3 6 6 rm1 5 3"),
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♣, 5♣, 6♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 5♣, 6♣, 7♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 6♣, 7♣, 8♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 7♣, 8♣, 9♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 8♣, 9♣, 10♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 9♣, 10♣, J♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 10♣, J♣, Q♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: J♣, Q♣, K♣\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: Q♣, K♣, A♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: K♣, A♥, 2♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: A♥, 2♥, 3♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 2♥, 3♥, 4♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♥, 4♥, 5♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 4♥, 5♥, 6♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 5♥, 6♥, 7♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 6♥, 7♥, 8♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 7♥, 8♥, 9♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 8♥, 9♥, 10♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 9♥, 10♥, J♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 10♥, J♥, Q♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: J♥, Q♥, K♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: Q♥, K♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: K♥\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw:\n"
            + "Score: 185\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  .   A♣  2♣\n"
            + "Draw:\n"
            + "Score: 172\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   Q♠  .   A♣  . \n"
            + "Draw:\n"
            + "Score: 159\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ .   .   .   .   . \n"
            + "Draw:\n"
            + "Score: 146\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  .   .   8♠\n"
            + "9♠  10♠ .   .   .   .   . \n"
            + "Draw:\n"
            + "Score: 133\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  .   .   .   . \n"
            + "9♠  10♠ .   .   .   .   . \n"
            + "Draw:\n"
            + "Score: 120\n"
            + "Game over. Score: 107"));
    assertEquals(test.get(0), test.get(1));
  }


  @Test
  public void testQuitMultiGame() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new MultiPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦  .   .   2♦  .   .   3♦\n"
            + "          4♦  5♦  .   6♦  7♦  .   8♦  9♦\n"
            + "        10♦ J♦  Q♦  K♦  A♠  2♠  3♠  4♠  5♠\n"
            + "      6♠  7♠  8♠  9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "    3♣  4♣  5♣  6♣  7♣  8♣  9♣  10♣ J♣  Q♣  K♣\n"
            + "  A♥  2♥  3♥  4♥  5♥  6♥  7♥  8♥  9♥  10♥ J♥  Q♥\n"
            + "K♥  A♦  2♦  3♦  4♦  5♦  6♦  7♦  8♦  9♦  10♦ J♦  Q♦\n"
            + "Draw: K♦, A♠, 2♠\n"
            + "Score: 442"),
        inputs("q"),
        prints("Game quit!\n"
            + "State of game when quit:\n"
            + "            A♦  .   .   2♦  .   .   3♦\n"
            + "          4♦  5♦  .   6♦  7♦  .   8♦  9♦\n"
            + "        10♦ J♦  Q♦  K♦  A♠  2♠  3♠  4♠  5♠\n"
            + "      6♠  7♠  8♠  9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "    3♣  4♣  5♣  6♣  7♣  8♣  9♣  10♣ J♣  Q♣  K♣\n"
            + "  A♥  2♥  3♥  4♥  5♥  6♥  7♥  8♥  9♥  10♥ J♥  Q♥\n"
            + "K♥  A♦  2♦  3♦  4♦  5♦  6♦  7♦  8♦  9♦  10♦ J♦  Q♦\n"
            + "Draw: K♦, A♠, 2♠\n"
            + "Score: 442"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testQuitWhileInputtingCommandRelaxedModel() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new RelaxedPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"),
        inputs("rm1 7 q"),
        prints("Invalid move. Play again. Invalid remove\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"),
        prints("Game quit!\n"
            + "State of game when quit:\n"
            + "            A♦\n"
            + "          2♦  3♦\n"
            + "        4♦  5♦  6♦\n"
            + "      7♦  8♦  9♦  10♦\n"
            + "    J♦  Q♦  K♦  A♠  2♠\n"
            + "  3♠  4♠  5♠  6♠  7♠  8♠\n"
            + "9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "Draw: 3♣, 4♣, 5♣\n"
            + "Score: 185"));
    assertEquals(test.get(0), test.get(1));
  }

  @Test
  public void testQuitWhileInputtingCommandMultiModel() throws IOException {
    PyramidSolitaireModel<Cards> pyramid = new MultiPyramidSolitaire();
    List<String> test = testRun(pyramid,
        prints("            A♦  .   .   2♦  .   .   3♦\n"
            + "          4♦  5♦  .   6♦  7♦  .   8♦  9♦\n"
            + "        10♦ J♦  Q♦  K♦  A♠  2♠  3♠  4♠  5♠\n"
            + "      6♠  7♠  8♠  9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "    3♣  4♣  5♣  6♣  7♣  8♣  9♣  10♣ J♣  Q♣  K♣\n"
            + "  A♥  2♥  3♥  4♥  5♥  6♥  7♥  8♥  9♥  10♥ J♥  Q♥\n"
            + "K♥  A♦  2♦  3♦  4♦  5♦  6♦  7♦  8♦  9♦  10♦ J♦  Q♦\n"
            + "Draw: K♦, A♠, 2♠\n"
            + "Score: 442"),
        inputs("rm1 frfrf 7 swdw q"),
        prints("            A♦  .   .   2♦  .   .   3♦\n"
            + "          4♦  5♦  .   6♦  7♦  .   8♦  9♦\n"
            + "        10♦ J♦  Q♦  K♦  A♠  2♠  3♠  4♠  5♠\n"
            + "      6♠  7♠  8♠  9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "    3♣  4♣  5♣  6♣  7♣  8♣  9♣  10♣ J♣  Q♣  K♣\n"
            + "  A♥  2♥  3♥  4♥  5♥  6♥  7♥  8♥  9♥  10♥ J♥  Q♥\n"
            + " .   A♦  2♦  3♦  4♦  5♦  6♦  7♦  8♦  9♦  10♦ J♦  Q♦\n"
            + "Draw: K♦, A♠, 2♠\n"
            + "Score: 429\n"
            + "Game quit!\n"
            + "State of game when quit:\n"
            + "            A♦  .   .   2♦  .   .   3♦\n"
            + "          4♦  5♦  .   6♦  7♦  .   8♦  9♦\n"
            + "        10♦ J♦  Q♦  K♦  A♠  2♠  3♠  4♠  5♠\n"
            + "      6♠  7♠  8♠  9♠  10♠ J♠  Q♠  K♠  A♣  2♣\n"
            + "    3♣  4♣  5♣  6♣  7♣  8♣  9♣  10♣ J♣  Q♣  K♣\n"
            + "  A♥  2♥  3♥  4♥  5♥  6♥  7♥  8♥  9♥  10♥ J♥  Q♥\n"
            + " .   A♦  2♦  3♦  4♦  5♦  6♦  7♦  8♦  9♦  10♦ J♦  Q♦\n"
            + "Draw: K♦, A♠, 2♠\n"
            + "Score: 429"));
    assertEquals(test.get(0), test.get(1));
  }
}
